#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "total" 0x151f7c75
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalDonations = GlobalState<uint64>({ key: "total", initialValue: 0 });
    bytec_0 // "total"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DonationBox extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0xbe3c278b 0x35f3f7de // method "donate()string", method "checkTotal()uint64"
    txna ApplicationArgs 0
    match main_donate_route@5 main_checkTotal_route@6

main_after_if_else@13:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DonationBox extends Contract {
    intc_0 // 0
    return

main_checkTotal_route@6:
    // smart_contracts/hello_world/contract.algo.ts:15
    // checkTotal(): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub checkTotal
    itob
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_donate_route@5:
    // smart_contracts/hello_world/contract.algo.ts:9
    // donate(): string {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub donate
    dup
    len
    itob
    extract 6 2
    swap
    concat
    bytec_1 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@9:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class DonationBox extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::DonationBox.donate() -> bytes:
donate:
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalDonations = GlobalState<uint64>({ key: "total", initialValue: 0 });
    intc_0 // 0
    bytec_0 // "total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.totalDonations.value = this.totalDonations.value + Txn.amount;
    txn Amount
    +
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalDonations = GlobalState<uint64>({ key: "total", initialValue: 0 });
    bytec_0 // "total"
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.totalDonations.value = this.totalDonations.value + Txn.amount;
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:11
    // return "Thanks for donating! 🙏";
    pushbytes "Thanks for donating! \xf0\x9f\x99\x8f"
    retsub


// smart_contracts/hello_world/contract.algo.ts::DonationBox.checkTotal() -> uint64:
checkTotal:
    // smart_contracts/hello_world/contract.algo.ts:6
    // totalDonations = GlobalState<uint64>({ key: "total", initialValue: 0 });
    intc_0 // 0
    bytec_0 // "total"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:16
    // return this.totalDonations.value;
    retsub
